import React, { useEffect, useState } from 'react';
import Modal from 'react-modal';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router-dom';
import './Users.css';
type User = {
  id: number;
  name: string;
  role: string;
  city: string;
  email: string;
  link: string;
  status: string;
  photo: string;
};

type FormData = {
  name: string;
  role: string;
  city: string;
  email: string;
  link: string;
  status: string;
};


export const Users = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();
  /*–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º*/ 
  useEffect(() =>{
    const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';
    if (!isAuthenticated) {
      navigate('/');
    }
  }, [navigate])
  const [users, setUsers] = useState(
    [
        {/*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*/ 
            id: 1,
            name: 'Balaji Nant',
            role: 'Lead Product Designer',
            city: 'Vancouver',
            email: 'ivan@doe.com',
            link: 'https://balajinant.com',
            status: 'Verified',
            photo: '/avatar1.jpg'
        },
        {
            id: 2,
            name: 'Nithya Menon',
            role: 'UI Designer',
            city: 'Bangalore',
            email: 'ivan@doe.com',
            link: 'project.com/user849',
            status: 'Ongoing',
            photo: '/avatar2.png'
        },
        {
          id:3,
          name: 'Meera Gonzalez',
          role: 'Product Designer',
          city: 'Toronto',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'On Hold',
          photo: '/avatar3.png'
        },
        {
          id:4,
          name: 'Karthik Subramanian',
          role: 'Sub Content',
          city: 'Coimbatore',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'Ongoing',
          photo: '/Avatar.png'
        },
        {
          id:5,
          name: 'Mithra B',
          role: 'Product Designer',
          city: 'Vancouver',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'Verified',
          photo: '/Avatar.png'
        },
        {
          id:6,
          name: 'Jagathesh Narayanan',
          role: 'Coimbatore',
          city: 'Coimbatore',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'Rejected',
          photo: '/avatar6.jpg'
        },
        {
          id:7,
          name: 'Steve Rogers',
          role: 'Developer',
          city: 'Toronto',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'Verified',
          photo: '/avatar7.jpg'
        },
        {
          id:8,
          name: 'Richard Hendricks',
          role: 'Sr. Developer',
          city: 'Palo Alto',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'On Hold',
          photo: '/avatar8.jpg'
        },
        {
          id:9,
          name: 'Monica Patel',
          role: 'UX Writer',
          city: 'Bangalore',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'On Hold',
          photo: '/avatar9.jpg'
        },
        {
          id:10,
          name: 'Dinesh Kumar',
          role: 'Project Manager',
          city: 'Chennai',
          email: 'ivan@doe.com',
          link: 'project.com/user849',
          status: 'Verified',
          photo: '/avatar10.jpg'
        },
    ]
  );
  /*–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ - –∑–∞–∫—Ä—ã—Ç–æ*/
  const[ isModalOpen, setIsModalOpen] = useState(false);
  /*register ‚Äî —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å —Ñ–æ—Ä–º–æ–π (–∞–Ω–∞–ª–æ–≥ name –∏ onChange –≤ —Ä—É—á–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏).
    handleSubmit ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.
    reset ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.
    errors ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.*/ 
  const { register, handleSubmit, reset, formState: { errors } } = useForm<FormData>();
  const openModal = () => setIsModalOpen(true);
  const closeModal = () => {
    setIsModalOpen(false);
    reset(); // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  };
 /*–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã*/
  const onSubmit = (data: FormData) => {
    const newUser: User = {
      ...data,  // –ë–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
      id: users.length + 1, //–ù–æ–≤—ã–π id 
      photo: '/Avatar.png', //—Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    setUsers([...users, newUser]);
    closeModal();
  };
  

  /*–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  window.confirm - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –Ω–∞–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏ 
  120 —Å—Ç—Ä–æ–∫–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*/ 
  const DeleteUsers = (id:number) =>{
  if (window.confirm('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
    setUsers(nUsers => nUsers.filter(user => user.id !== id));
  }
  };
    /*–î–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ - –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤–≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º —Ç–∞–±–ª–∏—Ü—ã*/ 
    const Users = users.filter(user =>
        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.role.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.city.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.status.toLowerCase().includes(searchTerm.toLowerCase())
    );
    /*–î–ª—è 4 —Å—Ç–æ–ª–±—Ü–∞ - –æ—Ç–æ–±—Ä–≤–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º*/ 
    const getStatus = (status:string) =>{
      switch(status){
        case 'Verified':
          return{ 
            backgroundColor: '#C9E8E8', 
            color: '#105352',
            padding: '4px 8px',
            borderRadius: '1px',
            minWidth: '75px',
            minHeight:'29px',
          };
        case 'Ongoing':
          return{ backgroundColor: '#CBDCF9', color: '#103680',
            padding: '4px 8px',
            borderRadius: '1px',
            minWidth: '75px',
            minHeight:'29px',
           };
        case 'On Hold':
          return{ backgroundColor: '#FFF3DD', color: '#AA8345',
            padding: '4px 8px',
            borderRadius: '1px',
            minWidth: '75px',
            minHeight:'29px',
           };
        case 'Rejected':
          return{ backgroundColor: '#F3D4D1', color: '#70241D',
            padding: '4px 8px',
            borderRadius: '1px',
            minWidth: '75px',
            minHeight:'29px',
           };
      }
    };  
  /*–ß—Ç–æ –º—ã –≤–∏–¥–∏–º –≤ –∏—Ç–æ–≥–µ*/ 
  return (
    <div className='users_body'>
        <div className='users_con'>
          <input id='search' type='text' placeholder="üîç–ü–æ–∏—Å–∫" className='search'
           onChange={(e) => setSearchTerm(e.target.value)} />
           {/*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*/}
          <button className='add_user' onClick={openModal}>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
          {/*–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è*/}
          {/*–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ*/}

           <Modal
          isOpen={isModalOpen}
          onRequestClose={closeModal}
          className={'modal_window'}
          overlayClassName="modal-overlay"
        >{/*–°–∞–º–∞ —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è*/}
          <form onSubmit={handleSubmit(onSubmit)} className='modal'>
                <div className="form-group">
              <label className='label_name'>–ò–º—è:</label>
              <input
                {...register("name", { required: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" })}
                className={errors.name ? "error" : ""}
              />
              {errors.name && <span className="error-text">{errors.name.message}</span>}
               <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
              <input
                {...register("role", { required: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" })}
              />
               <label>–ì–æ—Ä–æ–¥:</label>
              <input
                {...register("city", { required: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" })}
              />
              <label>Email:</label>
              <input
                type="email"
                {...register("email")}
              />
               <label>–°—Å—ã–ª–∫–∞:</label>
              <input
                type="url"
                {...register("link")}
              />
            </div>
            <div className="form-group">
              <label>–°—Ç–∞—Ç—É—Å:</label>
              <select {...register("status", { required: true })}>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</option>
                <option value="Verified" className='Verified'>Verified</option>
                <option value="Ongoing" className='Ongoing'>Ongoing</option>
                <option value="On Hold" className='On_Hold'>On Hold</option>
                <option value="Rejected" className='Rejected'>Rejected</option>
              </select>
            </div>

            <div className="form-buttons">
              <button type="submit" className="submit-btn">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
              <button type="button" onClick={closeModal} className="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
          </form>
        </Modal>  
          <div className='table_con'>
          <table className='users_table'>
            <thead className='table_head'>
            <tr>
              <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
              <th>–ì–æ—Ä–æ–¥</th>
              <th>–°—Å—ã–ª–∫–∞</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th className='actions'>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
            </thead>
            <tbody>
              {/*–ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*/}
              {Users.map(user => (
                <tr key={user.id}>
                  <td>
                    <div className='user_text'>
                        <img src={user.photo} className='img' alt='' />
                        <div className='text_info'>
                            <p className='name_text'><strong>{user.name}</strong></p>
                            <p className='role_text'>{user.role}</p>
                        </div>
                    </div> 
                  </td>
                  <td className='city_text'>{user.city}</td>
                  <td className='link_text'><a
                  href={user.link}
                  target='_blank' rel="noreferrer noopener">{user.link.replace(/^https?:\/\//, '')}</a></td>
                  <td className='status_text' >
                    <span style={getStatus(user.status)}>{user.status}</span></td>
                  <td className='actions_text'>
                    <div className='actions_icon'>
                        <span><img src='/Cell Action Button.png' className='icon_1' alt=''></img></span>
                        <span onClick={() => DeleteUsers(user.id)}><img src='/Cell Action Button (1).png' className='icon_2' alt='' /></span>
                    </div>
                    </td>
                </tr>
              ))}
            </tbody>
          </table>
          </div>

       </div>
    </div>
  )
};

